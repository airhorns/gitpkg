{"version":3,"file":"upload-package.js","names":["_path","_interopRequireDefault","require","_execLikeShell","_getTempDir","_getGitTagName","e","__esModule","default","uploadPackage","config","pkg","registry","process","env","GIT_AUTHOR_DATE","GIT_COMMITTER_DATE","pkgTempDir","getTempDir","pkgTempDirPkg","path","join","gitpkgPackageName","getGitTagName","execLikeShell","err","gitErrorExists","exists","stderr","indexOf","Error"],"sources":["../../../src/tasks/Publish/upload-package.js"],"sourcesContent":["import path from 'path';\nimport execLikeShell from './exec-like-shell';\nimport getTempDir from './get-temp-dir';\nimport getGitTagName from './get-git-tag-name';\n\nexport default async function uploadPackage(config, pkg, registry) {\n  // Timestamps are one of the inputs that cause entropy in a commit SHA.  By\n  // freezing the timestamps, we ensure that running `gitpkg publish` twice on\n  // the same files results in the same SHA.\n  //\n  // This makes publishing idempotent: you can run `gitpkg publish` as many\n  // times as you like, and it won't error unless the underlying files don't\n  // match.\n  process.env.GIT_AUTHOR_DATE = `1970-01-01T00:00:00.000Z`;\n  process.env.GIT_COMMITTER_DATE = `1970-01-01T00:00:00.000Z`;\n\n  const pkgTempDir = await getTempDir(pkg);\n  const pkgTempDirPkg = path.join(pkgTempDir, 'package');\n  const gitpkgPackageName = getGitTagName(pkg, config);\n  await execLikeShell('git init', pkgTempDirPkg);\n  await execLikeShell('git add .', pkgTempDirPkg);\n  await execLikeShell('git commit --no-verify -m gitpkg', pkgTempDirPkg);\n  await execLikeShell(`git remote add origin ${registry}`, pkgTempDirPkg);\n  await execLikeShell(`git tag ${gitpkgPackageName}`, pkgTempDirPkg);\n\n  // This command looks up the existing tags on the remote.\n  //\n  // If you push a tag that already exists, it should succeed with\n  // \"Everything up-to-date\".  However, your local copy must know the remote\n  // has the matching tag.  Otherwise, you'll receive `gitErrorExists`.\n  //\n  // By fetching and then pushing, we ensure that:\n  // -  If the tag hasn't been pushed yet, it is uploaded and the command\n  //    succeeds.\n  // -  If an identical tag has already been pushed, the command succeeds with\n  //    \"Everything up-to-date\".\n  // -  If the same tag name has already been pushed with different contents\n  //    (e.g. you forgot to change the version after making changes), the\n  //    push is rejected and an error is thrown.\n  await execLikeShell(`git fetch origin 'refs/tags/*:*'`, pkgTempDirPkg);\n\n  try {\n    await execLikeShell(`git push origin ${gitpkgPackageName}`, pkgTempDirPkg);\n  } catch (err) {\n    const gitErrorExists = 'Updates were rejected because the tag already exists in the remote.';\n    const exists = err.stderr.indexOf(gitErrorExists) > -1;\n    if (exists) {\n      throw new Error(`The git tag \"${gitpkgPackageName}\" already exists in \"${registry}\".`);\n    }\n\n    throw err;\n  }\n}\n"],"mappings":";;;;;;AAAA,IAAAA,KAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,cAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,WAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,cAAA,GAAAJ,sBAAA,CAAAC,OAAA;AAA+C,SAAAD,uBAAAK,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAEhC,eAAeG,aAAaA,CAACC,MAAM,EAAEC,GAAG,EAAEC,QAAQ,EAAE;EACjE;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,OAAO,CAACC,GAAG,CAACC,eAAe,GAAG,0BAA0B;EACxDF,OAAO,CAACC,GAAG,CAACE,kBAAkB,GAAG,0BAA0B;EAE3D,MAAMC,UAAU,GAAG,MAAM,IAAAC,mBAAU,EAACP,GAAG,CAAC;EACxC,MAAMQ,aAAa,GAAGC,aAAI,CAACC,IAAI,CAACJ,UAAU,EAAE,SAAS,CAAC;EACtD,MAAMK,iBAAiB,GAAG,IAAAC,sBAAa,EAACZ,GAAG,EAAED,MAAM,CAAC;EACpD,MAAM,IAAAc,sBAAa,EAAC,UAAU,EAAEL,aAAa,CAAC;EAC9C,MAAM,IAAAK,sBAAa,EAAC,WAAW,EAAEL,aAAa,CAAC;EAC/C,MAAM,IAAAK,sBAAa,EAAC,kCAAkC,EAAEL,aAAa,CAAC;EACtE,MAAM,IAAAK,sBAAa,EAAC,yBAAyBZ,QAAQ,EAAE,EAAEO,aAAa,CAAC;EACvE,MAAM,IAAAK,sBAAa,EAAC,WAAWF,iBAAiB,EAAE,EAAEH,aAAa,CAAC;;EAElE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAM,IAAAK,sBAAa,EAAC,kCAAkC,EAAEL,aAAa,CAAC;EAEtE,IAAI;IACF,MAAM,IAAAK,sBAAa,EAAC,mBAAmBF,iBAAiB,EAAE,EAAEH,aAAa,CAAC;EAC5E,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZ,MAAMC,cAAc,GAAG,qEAAqE;IAC5F,MAAMC,MAAM,GAAGF,GAAG,CAACG,MAAM,CAACC,OAAO,CAACH,cAAc,CAAC,GAAG,CAAC,CAAC;IACtD,IAAIC,MAAM,EAAE;MACV,MAAM,IAAIG,KAAK,CAAC,gBAAgBR,iBAAiB,wBAAwBV,QAAQ,IAAI,CAAC;IACxF;IAEA,MAAMa,GAAG;EACX;AACF","ignoreList":[]}