{"version":3,"file":"publish.js","names":["_ora","_interopRequireDefault","require","_chalk","_package","_Publish","_readConfig","e","__esModule","default","command","exports","describe","builder","r","alias","demandOption","type","handler","argv","console","log","chalk","bold","white","pkg","version","spinner","ora","text","start","publish","PublishTask","on","subtaskNumber","subtaskCount","subtaskName","gray","configFilePath","getNearestConfigFile","run","registry","pkgPath","process","cwd","configPath","then","packageInfo","succeed","green","gitpkgRegistry","gitpkgPackage","name","catch","err","stopAndPersist","fail","red","message","exit"],"sources":["../../../src/cli/commands/publish.js"],"sourcesContent":["import ora from 'ora';\nimport chalk from 'chalk';\nimport pkg from '../../../package.json';\nimport PublishTask from '../../tasks/Publish';\nimport { getNearestConfigFile } from '../../tasks/Task/read-config';\n\nexport const command = 'publish';\nexport const describe = 'Publishes a package to a git repository as git tag';\n\nexport const builder = {\n  r: {\n    alias: 'registry',\n    demandOption: false,\n    describe: 'Specify the gitpkg registry (defaults to the git remote origin url)',\n    type: 'string'\n  }\n};\n\nexport const handler = async argv => {\n  /* eslint-disable no-console */\n  console.log(chalk.bold.white(`gitpkg publish v${pkg.version}`));\n  const spinner = ora({ text: 'Processing...' }).start();\n\n  const publish = new PublishTask();\n  publish.on('subtask', (subtaskNumber, subtaskCount, subtaskName) => {\n    spinner.text = `${chalk.gray(`[${subtaskNumber}/${subtaskCount}]`)} ${subtaskName}...`;\n  });\n\n  const configFilePath = await getNearestConfigFile();\n\n  return publish\n    .run({\n      registry: argv.registry,\n      pkgPath: process.cwd(),\n      configPath: configFilePath\n    })\n    .then(packageInfo => {\n      spinner.succeed(\n        `${chalk.bold.green('success')} Package uploaded to ${\n          packageInfo.gitpkgRegistry\n        } with the name ${packageInfo.gitpkgPackage}.`\n      );\n      console.log(`+ ${packageInfo.name}@${packageInfo.version}`);\n    })\n    .catch(err => {\n      spinner.stopAndPersist();\n      spinner.fail(`${chalk.bold.red('error')} ${err.message}`);\n      process.exit(1);\n    });\n};\n"],"mappings":";;;;;;AAAA,IAAAA,IAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,MAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,QAAA,GAAAH,sBAAA,CAAAC,OAAA;AACA,IAAAG,QAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,WAAA,GAAAJ,OAAA;AAAoE,SAAAD,uBAAAM,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAE7D,MAAMG,OAAO,GAAAC,OAAA,CAAAD,OAAA,GAAG,SAAS;AACzB,MAAME,QAAQ,GAAAD,OAAA,CAAAC,QAAA,GAAG,oDAAoD;AAErE,MAAMC,OAAO,GAAAF,OAAA,CAAAE,OAAA,GAAG;EACrBC,CAAC,EAAE;IACDC,KAAK,EAAE,UAAU;IACjBC,YAAY,EAAE,KAAK;IACnBJ,QAAQ,EAAE,qEAAqE;IAC/EK,IAAI,EAAE;EACR;AACF,CAAC;AAEM,MAAMC,OAAO,GAAG,MAAMC,IAAI,IAAI;EACnC;EACAC,OAAO,CAACC,GAAG,CAACC,cAAK,CAACC,IAAI,CAACC,KAAK,CAAC,mBAAmBC,gBAAG,CAACC,OAAO,EAAE,CAAC,CAAC;EAC/D,MAAMC,OAAO,GAAG,IAAAC,YAAG,EAAC;IAAEC,IAAI,EAAE;EAAgB,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;EAEtD,MAAMC,OAAO,GAAG,IAAIC,gBAAW,CAAC,CAAC;EACjCD,OAAO,CAACE,EAAE,CAAC,SAAS,EAAE,CAACC,aAAa,EAAEC,YAAY,EAAEC,WAAW,KAAK;IAClET,OAAO,CAACE,IAAI,GAAG,GAAGP,cAAK,CAACe,IAAI,CAAC,IAAIH,aAAa,IAAIC,YAAY,GAAG,CAAC,IAAIC,WAAW,KAAK;EACxF,CAAC,CAAC;EAEF,MAAME,cAAc,GAAG,MAAM,IAAAC,gCAAoB,EAAC,CAAC;EAEnD,OAAOR,OAAO,CACXS,GAAG,CAAC;IACHC,QAAQ,EAAEtB,IAAI,CAACsB,QAAQ;IACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAAC,CAAC;IACtBC,UAAU,EAAEP;EACd,CAAC,CAAC,CACDQ,IAAI,CAACC,WAAW,IAAI;IACnBpB,OAAO,CAACqB,OAAO,CACb,GAAG1B,cAAK,CAACC,IAAI,CAAC0B,KAAK,CAAC,SAAS,CAAC,wBAC5BF,WAAW,CAACG,cAAc,kBACVH,WAAW,CAACI,aAAa,GAC7C,CAAC;IACD/B,OAAO,CAACC,GAAG,CAAC,KAAK0B,WAAW,CAACK,IAAI,IAAIL,WAAW,CAACrB,OAAO,EAAE,CAAC;EAC7D,CAAC,CAAC,CACD2B,KAAK,CAACC,GAAG,IAAI;IACZ3B,OAAO,CAAC4B,cAAc,CAAC,CAAC;IACxB5B,OAAO,CAAC6B,IAAI,CAAC,GAAGlC,cAAK,CAACC,IAAI,CAACkC,GAAG,CAAC,OAAO,CAAC,IAAIH,GAAG,CAACI,OAAO,EAAE,CAAC;IACzDf,OAAO,CAACgB,IAAI,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC;AACN,CAAC;AAAChD,OAAA,CAAAO,OAAA,GAAAA,OAAA","ignoreList":[]}